# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T00:42:24+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field, RootModel


class Account(BaseModel):
    creation_time: Optional[str] = None
    id: Optional[str] = Field(None, description='Unique identifier of this account.')
    kind: Optional[str] = Field(
        'adsense#account',
        description='Kind of resource this is, in this case adsense#account.',
    )
    name: Optional[str] = Field(None, description='Name of this account.')
    premium: Optional[bool] = Field(
        None, description='Whether this account is premium.'
    )
    subAccounts: Optional[List[Account]] = Field(
        None, description='Sub accounts of the this account.'
    )
    timezone: Optional[str] = Field(
        None, description='AdSense timezone of this account.'
    )


class Accounts(BaseModel):
    etag: Optional[str] = Field(
        None, description='ETag of this response for caching purposes.'
    )
    items: Optional[List[Account]] = Field(
        None, description='The accounts returned in this list response.'
    )
    kind: Optional[str] = Field(
        'adsense#accounts',
        description='Kind of list this is, in this case adsense#accounts.',
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Continuation token used to page through accounts. To retrieve the next page of results, set the next request\'s "pageToken" value to this.',
    )


class AdClient(BaseModel):
    arcOptIn: Optional[bool] = Field(
        None, description='Whether this ad client is opted in to ARC.'
    )
    id: Optional[str] = Field(None, description='Unique identifier of this ad client.')
    kind: Optional[str] = Field(
        'adsense#adClient',
        description='Kind of resource this is, in this case adsense#adClient.',
    )
    productCode: Optional[str] = Field(
        None,
        description="This ad client's product code, which corresponds to the PRODUCT_CODE report dimension.",
    )
    supportsReporting: Optional[bool] = Field(
        None, description='Whether this ad client supports being reported on.'
    )


class AdClients(BaseModel):
    etag: Optional[str] = Field(
        None, description='ETag of this response for caching purposes.'
    )
    items: Optional[List[AdClient]] = Field(
        None, description='The ad clients returned in this list response.'
    )
    kind: Optional[str] = Field(
        'adsense#adClients',
        description='Kind of list this is, in this case adsense#adClients.',
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Continuation token used to page through ad clients. To retrieve the next page of results, set the next request\'s "pageToken" value to this.',
    )


class AdCode(BaseModel):
    adCode: Optional[str] = Field(
        None, description='The Auto ad code snippet. The ad code snippet.'
    )
    ampBody: Optional[str] = Field(
        None,
        description='The AMP Auto ad code snippet that goes in the body of an AMP page.',
    )
    ampHead: Optional[str] = Field(
        None,
        description='The AMP Auto ad code snippet that goes in the head of an AMP page.',
    )
    kind: Optional[str] = Field(
        'adsense#adCode', description='Kind this is, in this case adsense#adCode.'
    )


class Colors(BaseModel):
    background: Optional[str] = Field(
        None, description='The color of the ad background.'
    )
    border: Optional[str] = Field(None, description='The color of the ad border.')
    text: Optional[str] = Field(None, description='The color of the ad text.')
    title: Optional[str] = Field(None, description='The color of the ad title.')
    url: Optional[str] = Field(None, description='The color of the ad url.')


class Font(BaseModel):
    family: Optional[str] = Field(None, description='The family of the font.')
    size: Optional[str] = Field(None, description='The size of the font.')


class AdStyle(BaseModel):
    colors: Optional[Colors] = Field(
        None,
        description='The colors which are included in the style. These are represented as six hexadecimal characters, similar to HTML color codes, but without the leading hash.',
    )
    corners: Optional[str] = Field(
        None,
        description='The style of the corners in the ad (deprecated: never populated, ignored).',
    )
    font: Optional[Font] = Field(
        None, description='The font which is included in the style.'
    )
    kind: Optional[str] = Field(
        'adsense#adStyle', description='Kind this is, in this case adsense#adStyle.'
    )


class BackupOption(BaseModel):
    color: Optional[str] = Field(
        None, description='Color to use when type is set to COLOR.'
    )
    type: Optional[str] = Field(
        None,
        description='Type of the backup option. Possible values are BLANK, COLOR and URL.',
    )
    url: Optional[str] = Field(None, description='URL to use when type is set to URL.')


class ContentAdsSettings(BaseModel):
    backupOption: Optional[BackupOption] = Field(
        None,
        description='The backup option to be used in instances where no ad is available.',
    )
    size: Optional[str] = Field(None, description='Size of this ad unit.')
    type: Optional[str] = Field(None, description='Type of this ad unit.')


class FeedAdsSettings(BaseModel):
    adPosition: Optional[str] = Field(
        None, description='The position of the ads relative to the feed entries.'
    )
    frequency: Optional[int] = Field(
        None,
        description='The frequency at which ads should appear in the feed (i.e. every N entries).',
    )
    minimumWordCount: Optional[int] = Field(
        None,
        description='The minimum length an entry should be in order to have attached ads.',
    )
    type: Optional[str] = Field(
        None, description='The type of ads which should appear.'
    )


class MobileContentAdsSettings(BaseModel):
    markupLanguage: Optional[str] = Field(
        None, description='The markup language to use for this ad unit.'
    )
    scriptingLanguage: Optional[str] = Field(
        None, description='The scripting language to use for this ad unit.'
    )
    size: Optional[str] = Field(None, description='Size of this ad unit.')
    type: Optional[str] = Field(None, description='Type of this ad unit.')


class AdUnit(BaseModel):
    code: Optional[str] = Field(
        None,
        description='Identity code of this ad unit, not necessarily unique across ad clients.',
    )
    contentAdsSettings: Optional[ContentAdsSettings] = Field(
        None,
        description='Settings specific to content ads (AFC) and highend mobile content ads (AFMC - deprecated).',
    )
    customStyle: Optional[AdStyle] = Field(
        None, description='Custom style information specific to this ad unit.'
    )
    feedAdsSettings: Optional[FeedAdsSettings] = Field(
        None, description='Settings specific to feed ads (AFF) - deprecated.'
    )
    id: Optional[str] = Field(
        None,
        description='Unique identifier of this ad unit. This should be considered an opaque identifier; it is not safe to rely on it being in any particular format.',
    )
    kind: Optional[str] = Field(
        'adsense#adUnit',
        description='Kind of resource this is, in this case adsense#adUnit.',
    )
    mobileContentAdsSettings: Optional[MobileContentAdsSettings] = Field(
        None,
        description='Settings specific to WAP mobile content ads (AFMC) - deprecated.',
    )
    name: Optional[str] = Field(None, description='Name of this ad unit.')
    savedStyleId: Optional[str] = Field(
        None,
        description="ID of the saved ad style which holds this ad unit's style information.",
    )
    status: Optional[str] = Field(
        None,
        description='Status of this ad unit. Possible values are:\nNEW: Indicates that the ad unit was created within the last seven days and does not yet have any activity associated with it.\n\nACTIVE: Indicates that there has been activity on this ad unit in the last seven days.\n\nINACTIVE: Indicates that there has been no activity on this ad unit in the last seven days.',
    )


class AdUnits(BaseModel):
    etag: Optional[str] = Field(
        None, description='ETag of this response for caching purposes.'
    )
    items: Optional[List[AdUnit]] = Field(
        None, description='The ad units returned in this list response.'
    )
    kind: Optional[str] = Field(
        'adsense#adUnits',
        description='Kind of list this is, in this case adsense#adUnits.',
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Continuation token used to page through ad units. To retrieve the next page of results, set the next request\'s "pageToken" value to this.',
    )


class Header(BaseModel):
    currency: Optional[str] = Field(
        None,
        description='The currency of this column. Only present if the header type is METRIC_CURRENCY.',
    )
    name: Optional[str] = Field(None, description='The name of the header.')
    type: Optional[str] = Field(
        None,
        description='The type of the header; one of DIMENSION, METRIC_TALLY, METRIC_RATIO, or METRIC_CURRENCY.',
    )


class AdsenseReportsGenerateResponse(BaseModel):
    averages: Optional[List[str]] = Field(
        None,
        description='The averages of the report. This is the same length as any other row in the report; cells corresponding to dimension columns are empty.',
    )
    endDate: Optional[str] = Field(
        None, description='The requested end date in yyyy-mm-dd format.'
    )
    headers: Optional[List[Header]] = Field(
        None,
        description='The header information of the columns requested in the report. This is a list of headers; one for each dimension in the request, followed by one for each metric in the request.',
    )
    kind: Optional[str] = Field(
        'adsense#report', description='Kind this is, in this case adsense#report.'
    )
    rows: Optional[List[List[str]]] = Field(
        None,
        description='The output rows of the report. Each row is a list of cells; one for each dimension in the request, followed by one for each metric in the request. The dimension cells contain strings, and the metric cells contain numbers.',
    )
    startDate: Optional[str] = Field(
        None, description='The requested start date in yyyy-mm-dd format.'
    )
    totalMatchedRows: Optional[str] = Field(
        None,
        description='The total number of rows matched by the report request. Fewer rows may be returned in the response due to being limited by the row count requested or the report row limit.',
    )
    totals: Optional[List[str]] = Field(
        None,
        description='The totals of the report. This is the same length as any other row in the report; cells corresponding to dimension columns are empty.',
    )
    warnings: Optional[List[str]] = Field(
        None, description='Any warnings associated with generation of the report.'
    )


class Alert(BaseModel):
    id: Optional[str] = Field(
        None,
        description='Unique identifier of this alert. This should be considered an opaque identifier; it is not safe to rely on it being in any particular format.',
    )
    isDismissible: Optional[bool] = Field(
        None, description='Whether this alert can be dismissed.'
    )
    kind: Optional[str] = Field(
        'adsense#alert',
        description='Kind of resource this is, in this case adsense#alert.',
    )
    message: Optional[str] = Field(None, description='The localized alert message.')
    severity: Optional[str] = Field(
        None,
        description='Severity of this alert. Possible values: INFO, WARNING, SEVERE.',
    )
    type: Optional[str] = Field(
        None,
        description='Type of this alert. Possible values: SELF_HOLD, MIGRATED_TO_BILLING3, ADDRESS_PIN_VERIFICATION, PHONE_PIN_VERIFICATION, CORPORATE_ENTITY, GRAYLISTED_PUBLISHER, API_HOLD.',
    )


class Alerts(BaseModel):
    items: Optional[List[Alert]] = Field(
        None, description='The alerts returned in this list response.'
    )
    kind: Optional[str] = Field(
        'adsense#alerts',
        description='Kind of list this is, in this case adsense#alerts.',
    )


class TargetingInfo(BaseModel):
    adsAppearOn: Optional[str] = Field(
        None, description='The name used to describe this channel externally.'
    )
    description: Optional[str] = Field(
        None, description='The external description of the channel.'
    )
    location: Optional[str] = Field(
        None,
        description='The locations in which ads appear. (Only valid for content and mobile content ads (deprecated)). Acceptable values for content ads are: TOP_LEFT, TOP_CENTER, TOP_RIGHT, MIDDLE_LEFT, MIDDLE_CENTER, MIDDLE_RIGHT, BOTTOM_LEFT, BOTTOM_CENTER, BOTTOM_RIGHT, MULTIPLE_LOCATIONS. Acceptable values for mobile content ads (deprecated) are: TOP, MIDDLE, BOTTOM, MULTIPLE_LOCATIONS.',
    )
    siteLanguage: Optional[str] = Field(
        None, description='The language of the sites ads will be displayed on.'
    )


class CustomChannel(BaseModel):
    code: Optional[str] = Field(
        None,
        description='Code of this custom channel, not necessarily unique across ad clients.',
    )
    id: Optional[str] = Field(
        None,
        description='Unique identifier of this custom channel. This should be considered an opaque identifier; it is not safe to rely on it being in any particular format.',
    )
    kind: Optional[str] = Field(
        'adsense#customChannel',
        description='Kind of resource this is, in this case adsense#customChannel.',
    )
    name: Optional[str] = Field(None, description='Name of this custom channel.')
    targetingInfo: Optional[TargetingInfo] = Field(
        None,
        description='The targeting information of this custom channel, if activated.',
    )


class CustomChannels(BaseModel):
    etag: Optional[str] = Field(
        None, description='ETag of this response for caching purposes.'
    )
    items: Optional[List[CustomChannel]] = Field(
        None, description='The custom channels returned in this list response.'
    )
    kind: Optional[str] = Field(
        'adsense#customChannels',
        description='Kind of list this is, in this case adsense#customChannels.',
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Continuation token used to page through custom channels. To retrieve the next page of results, set the next request\'s "pageToken" value to this.',
    )


class Payment(BaseModel):
    id: Optional[str] = Field(None, description='Unique identifier of this Payment.')
    kind: Optional[str] = Field(
        'adsense#payment',
        description='Kind of resource this is, in this case adsense#payment.',
    )
    paymentAmount: Optional[str] = Field(None, description='The amount to be paid.')
    paymentAmountCurrencyCode: Optional[str] = Field(
        None, description='The currency code for the amount to be paid.'
    )
    paymentDate: Optional[str] = Field(
        None,
        description='The date this payment was/will be credited to the user, or none if the payment threshold has not been met.',
    )


class Payments(BaseModel):
    items: Optional[List[Payment]] = Field(
        None,
        description="The list of Payments for the account. One or both of a) the account's most recent payment; and b) the account's upcoming payment.",
    )
    kind: Optional[str] = Field(
        'adsense#payments',
        description='Kind of list this is, in this case adsense#payments.',
    )


class ReportingMetadataEntry(BaseModel):
    compatibleDimensions: Optional[List[str]] = Field(
        None,
        description='For metrics this is a list of dimension IDs which the metric is compatible with, for dimensions it is a list of compatibility groups the dimension belongs to.',
    )
    compatibleMetrics: Optional[List[str]] = Field(
        None,
        description='The names of the metrics the dimension or metric this reporting metadata entry describes is compatible with.',
    )
    id: Optional[str] = Field(
        None,
        description='Unique identifier of this reporting metadata entry, corresponding to the name of the appropriate dimension or metric.',
    )
    kind: Optional[str] = Field(
        'adsense#reportingMetadataEntry',
        description='Kind of resource this is, in this case adsense#reportingMetadataEntry.',
    )
    requiredDimensions: Optional[List[str]] = Field(
        None,
        description='The names of the dimensions which the dimension or metric this reporting metadata entry describes requires to also be present in order for the report to be valid. Omitting these will not cause an error or warning, but may result in data which cannot be correctly interpreted.',
    )
    requiredMetrics: Optional[List[str]] = Field(
        None,
        description='The names of the metrics which the dimension or metric this reporting metadata entry describes requires to also be present in order for the report to be valid. Omitting these will not cause an error or warning, but may result in data which cannot be correctly interpreted.',
    )
    supportedProducts: Optional[List[str]] = Field(
        None,
        description='The codes of the projects supported by the dimension or metric this reporting metadata entry describes.',
    )


class SavedAdStyle(BaseModel):
    adStyle: Optional[AdStyle] = Field(None, description='The AdStyle itself.')
    id: Optional[str] = Field(
        None,
        description='Unique identifier of this saved ad style. This should be considered an opaque identifier; it is not safe to rely on it being in any particular format.',
    )
    kind: Optional[str] = Field(
        'adsense#savedAdStyle',
        description='Kind of resource this is, in this case adsense#savedAdStyle.',
    )
    name: Optional[str] = Field(
        None, description='The user selected name of this SavedAdStyle.'
    )


class SavedAdStyles(BaseModel):
    etag: Optional[str] = Field(
        None, description='ETag of this response for caching purposes.'
    )
    items: Optional[List[SavedAdStyle]] = Field(
        None, description='The saved ad styles returned in this list response.'
    )
    kind: Optional[str] = Field(
        'adsense#savedAdStyles',
        description='Kind of list this is, in this case adsense#savedAdStyles.',
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Continuation token used to page through ad units. To retrieve the next page of results, set the next request\'s "pageToken" value to this.',
    )


class SavedReport(BaseModel):
    id: Optional[str] = Field(
        None, description='Unique identifier of this saved report.'
    )
    kind: Optional[str] = Field(
        'adsense#savedReport',
        description='Kind of resource this is, in this case adsense#savedReport.',
    )
    name: Optional[str] = Field(None, description="This saved report's name.")


class SavedReports(BaseModel):
    etag: Optional[str] = Field(
        None, description='ETag of this response for caching purposes.'
    )
    items: Optional[List[SavedReport]] = Field(
        None, description='The saved reports returned in this list response.'
    )
    kind: Optional[str] = Field(
        'adsense#savedReports',
        description='Kind of list this is, in this case adsense#savedReports.',
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Continuation token used to page through saved reports. To retrieve the next page of results, set the next request\'s "pageToken" value to this.',
    )


class UrlChannel(BaseModel):
    id: Optional[str] = Field(
        None,
        description='Unique identifier of this URL channel. This should be considered an opaque identifier; it is not safe to rely on it being in any particular format.',
    )
    kind: Optional[str] = Field(
        'adsense#urlChannel',
        description='Kind of resource this is, in this case adsense#urlChannel.',
    )
    urlPattern: Optional[str] = Field(
        None,
        description='URL Pattern of this URL channel. Does not include "http://" or "https://". Example: www.example.com/home',
    )


class UrlChannels(BaseModel):
    etag: Optional[str] = Field(
        None, description='ETag of this response for caching purposes.'
    )
    items: Optional[List[UrlChannel]] = Field(
        None, description='The URL channels returned in this list response.'
    )
    kind: Optional[str] = Field(
        'adsense#urlChannels',
        description='Kind of list this is, in this case adsense#urlChannels.',
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Continuation token used to page through URL channels. To retrieve the next page of results, set the next request\'s "pageToken" value to this.',
    )


class Alt(Enum):
    csv = 'csv'
    json = 'json'


class Dimension(RootModel[List[str]]):
    root: List[str]


class Filter(RootModel[List[str]]):
    root: List[str]


class Metric(RootModel[List[str]]):
    root: List[str]


class Sort(RootModel[List[str]]):
    root: List[str]


class AccountId(RootModel[List[str]]):
    root: List[str]


class Metadata(BaseModel):
    items: Optional[List[ReportingMetadataEntry]] = None
    kind: Optional[str] = Field(
        'adsense#metadata',
        description='Kind of list this is, in this case adsense#metadata.',
    )


Account.model_rebuild()
