# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T00:42:24+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity, UnsuportedSecurityStub
from fastapi import Path, Query
from pydantic import conint

from models import (
    Account,
    AccountId,
    Accounts,
    AdClients,
    AdCode,
    AdsenseReportsGenerateResponse,
    AdUnit,
    AdUnits,
    Alerts,
    Alt,
    CustomChannel,
    CustomChannels,
    Dimension,
    Filter,
    Metadata,
    Metric,
    Payments,
    SavedAdStyle,
    SavedAdStyles,
    SavedReports,
    Sort,
    UrlChannels,
)

app = MCPProxy(
    contact={'name': 'Google', 'url': 'https://google.com', 'x-twitter': 'youtube'},
    description="Accesses AdSense publishers' inventory and generates performance reports.",
    license={
        'name': 'Creative Commons Attribution 3.0',
        'url': 'http://creativecommons.org/licenses/by/3.0/',
    },
    termsOfService='https://developers.google.com/terms/',
    title='AdSense Management API',
    version='v1.4',
    servers=[{'url': 'https://www.googleapis.com/adsense/v1.4'}],
)


@app.get(
    '/accounts',
    description=""" List all accounts available to this AdSense account. """,
    tags=['adsense_reporting_management', 'adsense_metadata_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def adsense_accounts_list(
    max_results: Optional[conint(ge=0, le=10000)] = Query(None, alias='maxResults'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{accountId}',
    description=""" Get information about the selected AdSense account. """,
    tags=['adsense_account_management', 'adsense_metadata_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def adsense_accounts_get(
    account_id: str = Path(..., alias='accountId'),
    tree: Optional[bool] = None,
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{accountId}/adclients',
    description=""" List all ad clients in the specified account. """,
    tags=['adsense_account_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def adsense_accounts_adclients_list(
    account_id: str = Path(..., alias='accountId'),
    max_results: Optional[conint(ge=0, le=10000)] = Query(None, alias='maxResults'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{accountId}/adclients/{adClientId}/adcode',
    description=""" Get Auto ad code for a given ad client. """,
    tags=['adsense_account_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def adsense_accounts_adclients_get_ad_code(
    account_id: str = Path(..., alias='accountId'),
    ad_client_id: str = Path(..., alias='adClientId'),
    tag_partner: Optional[str] = Query(None, alias='tagPartner'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{accountId}/adclients/{adClientId}/adunits',
    description=""" List all ad units in the specified ad client for the specified account. """,
    tags=['adsense_account_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def adsense_accounts_adunits_list(
    account_id: str = Path(..., alias='accountId'),
    ad_client_id: str = Path(..., alias='adClientId'),
    include_inactive: Optional[bool] = Query(None, alias='includeInactive'),
    max_results: Optional[conint(ge=0, le=10000)] = Query(None, alias='maxResults'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}',
    description=""" Gets the specified ad unit in the specified ad client for the specified account. """,
    tags=['adsense_account_management', 'adsense_ad_units_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def adsense_accounts_adunits_get(
    account_id: str = Path(..., alias='accountId'),
    ad_client_id: str = Path(..., alias='adClientId'),
    ad_unit_id: str = Path(..., alias='adUnitId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}/adcode',
    description=""" Get ad code for the specified ad unit. """,
    tags=['adsense_account_management', 'adsense_ad_units_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def adsense_accounts_adunits_get_ad_code(
    account_id: str = Path(..., alias='accountId'),
    ad_client_id: str = Path(..., alias='adClientId'),
    ad_unit_id: str = Path(..., alias='adUnitId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}/customchannels',
    description=""" List all custom channels which the specified ad unit belongs to. """,
    tags=['adsense_ad_units_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def adsense_accounts_adunits_customchannels_list(
    account_id: str = Path(..., alias='accountId'),
    ad_client_id: str = Path(..., alias='adClientId'),
    ad_unit_id: str = Path(..., alias='adUnitId'),
    max_results: Optional[conint(ge=0, le=10000)] = Query(None, alias='maxResults'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{accountId}/adclients/{adClientId}/customchannels',
    description=""" List all custom channels in the specified ad client for the specified account. """,
    tags=['adsense_account_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def adsense_accounts_customchannels_list(
    account_id: str = Path(..., alias='accountId'),
    ad_client_id: str = Path(..., alias='adClientId'),
    max_results: Optional[conint(ge=0, le=10000)] = Query(None, alias='maxResults'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{accountId}/adclients/{adClientId}/customchannels/{customChannelId}',
    description=""" Get the specified custom channel from the specified ad client for the specified account. """,
    tags=['adsense_account_management', 'adsense_custom_channels_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def adsense_accounts_customchannels_get(
    account_id: str = Path(..., alias='accountId'),
    ad_client_id: str = Path(..., alias='adClientId'),
    custom_channel_id: str = Path(..., alias='customChannelId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{accountId}/adclients/{adClientId}/customchannels/{customChannelId}/adunits',
    description=""" List all ad units in the specified custom channel. """,
    tags=['adsense_custom_channels_management', 'adsense_account_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def adsense_accounts_customchannels_adunits_list(
    account_id: str = Path(..., alias='accountId'),
    ad_client_id: str = Path(..., alias='adClientId'),
    custom_channel_id: str = Path(..., alias='customChannelId'),
    include_inactive: Optional[bool] = Query(None, alias='includeInactive'),
    max_results: Optional[conint(ge=0, le=10000)] = Query(None, alias='maxResults'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{accountId}/adclients/{adClientId}/urlchannels',
    description=""" List all URL channels in the specified ad client for the specified account. """,
    tags=['adsense_account_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def adsense_accounts_urlchannels_list(
    account_id: str = Path(..., alias='accountId'),
    ad_client_id: str = Path(..., alias='adClientId'),
    max_results: Optional[conint(ge=0, le=10000)] = Query(None, alias='maxResults'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{accountId}/alerts',
    description=""" List the alerts for the specified AdSense account. """,
    tags=['adsense_account_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def adsense_accounts_alerts_list(
    account_id: str = Path(..., alias='accountId'),
    locale: Optional[str] = None,
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/accounts/{accountId}/alerts/{alertId}',
    description=""" Dismiss (delete) the specified alert from the specified publisher AdSense account. """,
    tags=['adsense_alert_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def adsense_accounts_alerts_delete(
    account_id: str = Path(..., alias='accountId'),
    alert_id: str = Path(..., alias='alertId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{accountId}/payments',
    description=""" List the payments for the specified AdSense account. """,
    tags=['adsense_account_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def adsense_accounts_payments_list(
    account_id: str = Path(..., alias='accountId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{accountId}/reports',
    description=""" Generate an AdSense report based on the report request sent in the query parameters. Returns the result as JSON; to retrieve output in CSV format specify "alt=csv" as a query parameter. """,
    tags=[
        'adsense_reporting_management',
        'adsense_report_operations',
        'adsense_metadata_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def adsense_accounts_reports_generate(
    account_id: str = Path(..., alias='accountId'),
    start_date: str = Query(..., alias='startDate'),
    end_date: str = Query(..., alias='endDate'),
    currency: Optional[str] = None,
    dimension: Optional[Dimension] = None,
    filter: Optional[Filter] = None,
    locale: Optional[str] = None,
    max_results: Optional[conint(ge=0, le=50000)] = Query(None, alias='maxResults'),
    metric: Optional[Metric] = None,
    sort: Optional[Sort] = None,
    start_index: Optional[conint(ge=0, le=5000)] = Query(None, alias='startIndex'),
    use_timezone_reporting: Optional[bool] = Query(None, alias='useTimezoneReporting'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{accountId}/reports/saved',
    description=""" List all saved reports in the specified AdSense account. """,
    tags=['adsense_account_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def adsense_accounts_reports_saved_list(
    account_id: str = Path(..., alias='accountId'),
    max_results: Optional[conint(ge=0, le=100)] = Query(None, alias='maxResults'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{accountId}/reports/{savedReportId}',
    description=""" Generate an AdSense report based on the saved report ID sent in the query parameters. """,
    tags=['adsense_report_operations', 'adsense_reporting_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def adsense_accounts_reports_saved_generate(
    account_id: str = Path(..., alias='accountId'),
    saved_report_id: str = Path(..., alias='savedReportId'),
    locale: Optional[str] = None,
    max_results: Optional[conint(ge=0, le=50000)] = Query(None, alias='maxResults'),
    start_index: Optional[conint(ge=0, le=5000)] = Query(None, alias='startIndex'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{accountId}/savedadstyles',
    description=""" List all saved ad styles in the specified account. """,
    tags=['adsense_account_management', 'adsense_metadata_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def adsense_accounts_savedadstyles_list(
    account_id: str = Path(..., alias='accountId'),
    max_results: Optional[conint(ge=0, le=10000)] = Query(None, alias='maxResults'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{accountId}/savedadstyles/{savedAdStyleId}',
    description=""" List a specific saved ad style for the specified account. """,
    tags=['adsense_saved_styles_management', 'adsense_ad_styles_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def adsense_accounts_savedadstyles_get(
    account_id: str = Path(..., alias='accountId'),
    saved_ad_style_id: str = Path(..., alias='savedAdStyleId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/adclients',
    description=""" List all ad clients in this AdSense account. """,
    tags=['adsense_metadata_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def adsense_adclients_list(
    max_results: Optional[conint(ge=0, le=10000)] = Query(None, alias='maxResults'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/adclients/{adClientId}/adunits',
    description=""" List all ad units in the specified ad client for this AdSense account. """,
    tags=['adsense_account_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def adsense_adunits_list(
    ad_client_id: str = Path(..., alias='adClientId'),
    include_inactive: Optional[bool] = Query(None, alias='includeInactive'),
    max_results: Optional[conint(ge=0, le=10000)] = Query(None, alias='maxResults'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/adclients/{adClientId}/adunits/{adUnitId}',
    description=""" Gets the specified ad unit in the specified ad client. """,
    tags=['adsense_ad_units_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def adsense_adunits_get(
    ad_client_id: str = Path(..., alias='adClientId'),
    ad_unit_id: str = Path(..., alias='adUnitId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/adclients/{adClientId}/adunits/{adUnitId}/adcode',
    description=""" Get ad code for the specified ad unit. """,
    tags=['adsense_ad_units_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def adsense_adunits_get_ad_code(
    ad_client_id: str = Path(..., alias='adClientId'),
    ad_unit_id: str = Path(..., alias='adUnitId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/adclients/{adClientId}/adunits/{adUnitId}/customchannels',
    description=""" List all custom channels which the specified ad unit belongs to. """,
    tags=[
        'adsense_ad_units_management',
        'adsense_metadata_management',
        'adsense_report_operations',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def adsense_adunits_customchannels_list(
    ad_client_id: str = Path(..., alias='adClientId'),
    ad_unit_id: str = Path(..., alias='adUnitId'),
    max_results: Optional[conint(ge=0, le=10000)] = Query(None, alias='maxResults'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/adclients/{adClientId}/customchannels',
    description=""" List all custom channels in the specified ad client for this AdSense account. """,
    tags=['adsense_account_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def adsense_customchannels_list(
    ad_client_id: str = Path(..., alias='adClientId'),
    max_results: Optional[conint(ge=0, le=10000)] = Query(None, alias='maxResults'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/adclients/{adClientId}/customchannels/{customChannelId}',
    description=""" Get the specified custom channel from the specified ad client. """,
    tags=['adsense_custom_channels_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def adsense_customchannels_get(
    ad_client_id: str = Path(..., alias='adClientId'),
    custom_channel_id: str = Path(..., alias='customChannelId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/adclients/{adClientId}/customchannels/{customChannelId}/adunits',
    description=""" List all ad units in the specified custom channel. """,
    tags=['adsense_custom_channels_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def adsense_customchannels_adunits_list(
    ad_client_id: str = Path(..., alias='adClientId'),
    custom_channel_id: str = Path(..., alias='customChannelId'),
    include_inactive: Optional[bool] = Query(None, alias='includeInactive'),
    max_results: Optional[conint(ge=0, le=10000)] = Query(None, alias='maxResults'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/adclients/{adClientId}/urlchannels',
    description=""" List all URL channels in the specified ad client for this AdSense account. """,
    tags=[
        'adsense_account_management',
        'adsense_ad_units_management',
        'adsense_reporting_management',
        'adsense_metadata_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def adsense_urlchannels_list(
    ad_client_id: str = Path(..., alias='adClientId'),
    max_results: Optional[conint(ge=0, le=10000)] = Query(None, alias='maxResults'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/alerts',
    description=""" List the alerts for this AdSense account. """,
    tags=['adsense_metadata_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def adsense_alerts_list(
    locale: Optional[str] = None,
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/alerts/{alertId}',
    description=""" Dismiss (delete) the specified alert from the publisher's AdSense account. """,
    tags=['adsense_alert_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def adsense_alerts_delete(
    alert_id: str = Path(..., alias='alertId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/metadata/dimensions',
    description=""" List the metadata for the dimensions available to this AdSense account. """,
    tags=['adsense_metadata_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def adsense_metadata_dimensions_list(
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/metadata/metrics',
    description=""" List the metadata for the metrics available to this AdSense account. """,
    tags=['adsense_metadata_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def adsense_metadata_metrics_list(
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/payments',
    description=""" List the payments for this AdSense account. """,
    tags=['adsense_account_management', 'adsense_metadata_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def adsense_payments_list(
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/reports',
    description=""" Generate an AdSense report based on the report request sent in the query parameters. Returns the result as JSON; to retrieve output in CSV format specify "alt=csv" as a query parameter. """,
    tags=[
        'adsense_reporting_management',
        'adsense_report_operations',
        'adsense_metadata_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def adsense_reports_generate(
    start_date: str = Query(..., alias='startDate'),
    end_date: str = Query(..., alias='endDate'),
    account_id: Optional[AccountId] = Query(None, alias='accountId'),
    currency: Optional[str] = None,
    dimension: Optional[Dimension] = None,
    filter: Optional[Filter] = None,
    locale: Optional[str] = None,
    max_results: Optional[conint(ge=0, le=50000)] = Query(None, alias='maxResults'),
    metric: Optional[Metric] = None,
    sort: Optional[Sort] = None,
    start_index: Optional[conint(ge=0, le=5000)] = Query(None, alias='startIndex'),
    use_timezone_reporting: Optional[bool] = Query(None, alias='useTimezoneReporting'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/reports/saved',
    description=""" List all saved reports in this AdSense account. """,
    tags=[
        'adsense_account_management',
        'adsense_reporting_management',
        'adsense_metadata_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def adsense_reports_saved_list(
    max_results: Optional[conint(ge=0, le=100)] = Query(None, alias='maxResults'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/reports/{savedReportId}',
    description=""" Generate an AdSense report based on the saved report ID sent in the query parameters. """,
    tags=['adsense_report_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def adsense_reports_saved_generate(
    saved_report_id: str = Path(..., alias='savedReportId'),
    locale: Optional[str] = None,
    max_results: Optional[conint(ge=0, le=50000)] = Query(None, alias='maxResults'),
    start_index: Optional[conint(ge=0, le=5000)] = Query(None, alias='startIndex'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/savedadstyles',
    description=""" List all saved ad styles in the user's account. """,
    tags=['adsense_metadata_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def adsense_savedadstyles_list(
    max_results: Optional[conint(ge=0, le=10000)] = Query(None, alias='maxResults'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/savedadstyles/{savedAdStyleId}',
    description=""" Get a specific saved ad style from the user's account. """,
    tags=['adsense_saved_styles_management', 'adsense_ad_styles_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def adsense_savedadstyles_get(
    saved_ad_style_id: str = Path(..., alias='savedAdStyleId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
